// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AlbumArtist is an object representing the database table.
type AlbumArtist struct {
	AlbumArtistID int       `boil:"album_artist_id" json:"album_artist_id" toml:"album_artist_id" yaml:"album_artist_id"`
	Name          string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	DiskNo        int       `boil:"disk_no" json:"disk_no" toml:"disk_no" yaml:"disk_no"`
	DiskTotal     int       `boil:"disk_total" json:"disk_total" toml:"disk_total" yaml:"disk_total"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *albumArtistR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L albumArtistL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AlbumArtistColumns = struct {
	AlbumArtistID string
	Name          string
	DiskNo        string
	DiskTotal     string
	CreatedAt     string
	UpdatedAt     string
}{
	AlbumArtistID: "album_artist_id",
	Name:          "name",
	DiskNo:        "disk_no",
	DiskTotal:     "disk_total",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var AlbumArtistTableColumns = struct {
	AlbumArtistID string
	Name          string
	DiskNo        string
	DiskTotal     string
	CreatedAt     string
	UpdatedAt     string
}{
	AlbumArtistID: "album_artists.album_artist_id",
	Name:          "album_artists.name",
	DiskNo:        "album_artists.disk_no",
	DiskTotal:     "album_artists.disk_total",
	CreatedAt:     "album_artists.created_at",
	UpdatedAt:     "album_artists.updated_at",
}

// Generated where

var AlbumArtistWhere = struct {
	AlbumArtistID whereHelperint
	Name          whereHelperstring
	DiskNo        whereHelperint
	DiskTotal     whereHelperint
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	AlbumArtistID: whereHelperint{field: "`album_artists`.`album_artist_id`"},
	Name:          whereHelperstring{field: "`album_artists`.`name`"},
	DiskNo:        whereHelperint{field: "`album_artists`.`disk_no`"},
	DiskTotal:     whereHelperint{field: "`album_artists`.`disk_total`"},
	CreatedAt:     whereHelpertime_Time{field: "`album_artists`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`album_artists`.`updated_at`"},
}

// AlbumArtistRels is where relationship names are stored.
var AlbumArtistRels = struct {
	Albums string
	Tracks string
}{
	Albums: "Albums",
	Tracks: "Tracks",
}

// albumArtistR is where relationships are stored.
type albumArtistR struct {
	Albums AlbumSlice `boil:"Albums" json:"Albums" toml:"Albums" yaml:"Albums"`
	Tracks TrackSlice `boil:"Tracks" json:"Tracks" toml:"Tracks" yaml:"Tracks"`
}

// NewStruct creates a new relationship struct
func (*albumArtistR) NewStruct() *albumArtistR {
	return &albumArtistR{}
}

// albumArtistL is where Load methods for each relationship are stored.
type albumArtistL struct{}

var (
	albumArtistAllColumns            = []string{"album_artist_id", "name", "disk_no", "disk_total", "created_at", "updated_at"}
	albumArtistColumnsWithoutDefault = []string{"album_artist_id", "name", "disk_no", "disk_total", "created_at", "updated_at"}
	albumArtistColumnsWithDefault    = []string{}
	albumArtistPrimaryKeyColumns     = []string{"album_artist_id"}
)

type (
	// AlbumArtistSlice is an alias for a slice of pointers to AlbumArtist.
	// This should almost always be used instead of []AlbumArtist.
	AlbumArtistSlice []*AlbumArtist
	// AlbumArtistHook is the signature for custom AlbumArtist hook methods
	AlbumArtistHook func(context.Context, boil.ContextExecutor, *AlbumArtist) error

	albumArtistQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	albumArtistType                 = reflect.TypeOf(&AlbumArtist{})
	albumArtistMapping              = queries.MakeStructMapping(albumArtistType)
	albumArtistPrimaryKeyMapping, _ = queries.BindMapping(albumArtistType, albumArtistMapping, albumArtistPrimaryKeyColumns)
	albumArtistInsertCacheMut       sync.RWMutex
	albumArtistInsertCache          = make(map[string]insertCache)
	albumArtistUpdateCacheMut       sync.RWMutex
	albumArtistUpdateCache          = make(map[string]updateCache)
	albumArtistUpsertCacheMut       sync.RWMutex
	albumArtistUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var albumArtistBeforeInsertHooks []AlbumArtistHook
var albumArtistBeforeUpdateHooks []AlbumArtistHook
var albumArtistBeforeDeleteHooks []AlbumArtistHook
var albumArtistBeforeUpsertHooks []AlbumArtistHook

var albumArtistAfterInsertHooks []AlbumArtistHook
var albumArtistAfterSelectHooks []AlbumArtistHook
var albumArtistAfterUpdateHooks []AlbumArtistHook
var albumArtistAfterDeleteHooks []AlbumArtistHook
var albumArtistAfterUpsertHooks []AlbumArtistHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AlbumArtist) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumArtistBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AlbumArtist) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumArtistBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AlbumArtist) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumArtistBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AlbumArtist) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumArtistBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AlbumArtist) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumArtistAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AlbumArtist) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumArtistAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AlbumArtist) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumArtistAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AlbumArtist) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumArtistAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AlbumArtist) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range albumArtistAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAlbumArtistHook registers your hook function for all future operations.
func AddAlbumArtistHook(hookPoint boil.HookPoint, albumArtistHook AlbumArtistHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		albumArtistBeforeInsertHooks = append(albumArtistBeforeInsertHooks, albumArtistHook)
	case boil.BeforeUpdateHook:
		albumArtistBeforeUpdateHooks = append(albumArtistBeforeUpdateHooks, albumArtistHook)
	case boil.BeforeDeleteHook:
		albumArtistBeforeDeleteHooks = append(albumArtistBeforeDeleteHooks, albumArtistHook)
	case boil.BeforeUpsertHook:
		albumArtistBeforeUpsertHooks = append(albumArtistBeforeUpsertHooks, albumArtistHook)
	case boil.AfterInsertHook:
		albumArtistAfterInsertHooks = append(albumArtistAfterInsertHooks, albumArtistHook)
	case boil.AfterSelectHook:
		albumArtistAfterSelectHooks = append(albumArtistAfterSelectHooks, albumArtistHook)
	case boil.AfterUpdateHook:
		albumArtistAfterUpdateHooks = append(albumArtistAfterUpdateHooks, albumArtistHook)
	case boil.AfterDeleteHook:
		albumArtistAfterDeleteHooks = append(albumArtistAfterDeleteHooks, albumArtistHook)
	case boil.AfterUpsertHook:
		albumArtistAfterUpsertHooks = append(albumArtistAfterUpsertHooks, albumArtistHook)
	}
}

// One returns a single albumArtist record from the query.
func (q albumArtistQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AlbumArtist, error) {
	o := &AlbumArtist{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for album_artists")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AlbumArtist records from the query.
func (q albumArtistQuery) All(ctx context.Context, exec boil.ContextExecutor) (AlbumArtistSlice, error) {
	var o []*AlbumArtist

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to AlbumArtist slice")
	}

	if len(albumArtistAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AlbumArtist records in the query.
func (q albumArtistQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count album_artists rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q albumArtistQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if album_artists exists")
	}

	return count > 0, nil
}

// Albums retrieves all the album's Albums with an executor.
func (o *AlbumArtist) Albums(mods ...qm.QueryMod) albumQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`album`.`album_artist_id`=?", o.AlbumArtistID),
	)

	query := Albums(queryMods...)
	queries.SetFrom(query.Query, "`album`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`album`.*"})
	}

	return query
}

// Tracks retrieves all the track's Tracks with an executor.
func (o *AlbumArtist) Tracks(mods ...qm.QueryMod) trackQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`tracks`.`album_artist_id`=?", o.AlbumArtistID),
	)

	query := Tracks(queryMods...)
	queries.SetFrom(query.Query, "`tracks`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`tracks`.*"})
	}

	return query
}

// LoadAlbums allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (albumArtistL) LoadAlbums(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAlbumArtist interface{}, mods queries.Applicator) error {
	var slice []*AlbumArtist
	var object *AlbumArtist

	if singular {
		object = maybeAlbumArtist.(*AlbumArtist)
	} else {
		slice = *maybeAlbumArtist.(*[]*AlbumArtist)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &albumArtistR{}
		}
		args = append(args, object.AlbumArtistID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &albumArtistR{}
			}

			for _, a := range args {
				if a == obj.AlbumArtistID {
					continue Outer
				}
			}

			args = append(args, obj.AlbumArtistID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`album`),
		qm.WhereIn(`album.album_artist_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load album")
	}

	var resultSlice []*Album
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice album")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on album")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for album")
	}

	if len(albumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Albums = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &albumR{}
			}
			foreign.R.AlbumArtist = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AlbumArtistID == foreign.AlbumArtistID {
				local.R.Albums = append(local.R.Albums, foreign)
				if foreign.R == nil {
					foreign.R = &albumR{}
				}
				foreign.R.AlbumArtist = local
				break
			}
		}
	}

	return nil
}

// LoadTracks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (albumArtistL) LoadTracks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAlbumArtist interface{}, mods queries.Applicator) error {
	var slice []*AlbumArtist
	var object *AlbumArtist

	if singular {
		object = maybeAlbumArtist.(*AlbumArtist)
	} else {
		slice = *maybeAlbumArtist.(*[]*AlbumArtist)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &albumArtistR{}
		}
		args = append(args, object.AlbumArtistID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &albumArtistR{}
			}

			for _, a := range args {
				if a == obj.AlbumArtistID {
					continue Outer
				}
			}

			args = append(args, obj.AlbumArtistID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tracks`),
		qm.WhereIn(`tracks.album_artist_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tracks")
	}

	var resultSlice []*Track
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tracks")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tracks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tracks")
	}

	if len(trackAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tracks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &trackR{}
			}
			foreign.R.AlbumArtist = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.AlbumArtistID == foreign.AlbumArtistID {
				local.R.Tracks = append(local.R.Tracks, foreign)
				if foreign.R == nil {
					foreign.R = &trackR{}
				}
				foreign.R.AlbumArtist = local
				break
			}
		}
	}

	return nil
}

// AddAlbums adds the given related objects to the existing relationships
// of the album_artist, optionally inserting them as new records.
// Appends related to o.R.Albums.
// Sets related.R.AlbumArtist appropriately.
func (o *AlbumArtist) AddAlbums(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Album) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AlbumArtistID = o.AlbumArtistID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `album` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"album_artist_id"}),
				strmangle.WhereClause("`", "`", 0, albumPrimaryKeyColumns),
			)
			values := []interface{}{o.AlbumArtistID, rel.AlbumID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AlbumArtistID = o.AlbumArtistID
		}
	}

	if o.R == nil {
		o.R = &albumArtistR{
			Albums: related,
		}
	} else {
		o.R.Albums = append(o.R.Albums, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &albumR{
				AlbumArtist: o,
			}
		} else {
			rel.R.AlbumArtist = o
		}
	}
	return nil
}

// AddTracks adds the given related objects to the existing relationships
// of the album_artist, optionally inserting them as new records.
// Appends related to o.R.Tracks.
// Sets related.R.AlbumArtist appropriately.
func (o *AlbumArtist) AddTracks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Track) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AlbumArtistID = o.AlbumArtistID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `tracks` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"album_artist_id"}),
				strmangle.WhereClause("`", "`", 0, trackPrimaryKeyColumns),
			)
			values := []interface{}{o.AlbumArtistID, rel.TrackID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AlbumArtistID = o.AlbumArtistID
		}
	}

	if o.R == nil {
		o.R = &albumArtistR{
			Tracks: related,
		}
	} else {
		o.R.Tracks = append(o.R.Tracks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &trackR{
				AlbumArtist: o,
			}
		} else {
			rel.R.AlbumArtist = o
		}
	}
	return nil
}

// AlbumArtists retrieves all the records using an executor.
func AlbumArtists(mods ...qm.QueryMod) albumArtistQuery {
	mods = append(mods, qm.From("`album_artists`"))
	return albumArtistQuery{NewQuery(mods...)}
}

// FindAlbumArtist retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAlbumArtist(ctx context.Context, exec boil.ContextExecutor, albumArtistID int, selectCols ...string) (*AlbumArtist, error) {
	albumArtistObj := &AlbumArtist{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `album_artists` where `album_artist_id`=?", sel,
	)

	q := queries.Raw(query, albumArtistID)

	err := q.Bind(ctx, exec, albumArtistObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from album_artists")
	}

	if err = albumArtistObj.doAfterSelectHooks(ctx, exec); err != nil {
		return albumArtistObj, err
	}

	return albumArtistObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AlbumArtist) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no album_artists provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(albumArtistColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	albumArtistInsertCacheMut.RLock()
	cache, cached := albumArtistInsertCache[key]
	albumArtistInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			albumArtistAllColumns,
			albumArtistColumnsWithDefault,
			albumArtistColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(albumArtistType, albumArtistMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(albumArtistType, albumArtistMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `album_artists` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `album_artists` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `album_artists` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, albumArtistPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into album_artists")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.AlbumArtistID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to populate default values for album_artists")
	}

CacheNoHooks:
	if !cached {
		albumArtistInsertCacheMut.Lock()
		albumArtistInsertCache[key] = cache
		albumArtistInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AlbumArtist.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AlbumArtist) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	albumArtistUpdateCacheMut.RLock()
	cache, cached := albumArtistUpdateCache[key]
	albumArtistUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			albumArtistAllColumns,
			albumArtistPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update album_artists, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `album_artists` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, albumArtistPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(albumArtistType, albumArtistMapping, append(wl, albumArtistPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update album_artists row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for album_artists")
	}

	if !cached {
		albumArtistUpdateCacheMut.Lock()
		albumArtistUpdateCache[key] = cache
		albumArtistUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q albumArtistQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for album_artists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for album_artists")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AlbumArtistSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), albumArtistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `album_artists` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, albumArtistPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in albumArtist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all albumArtist")
	}
	return rowsAff, nil
}

var mySQLAlbumArtistUniqueColumns = []string{
	"album_artist_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AlbumArtist) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no album_artists provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(albumArtistColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAlbumArtistUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	albumArtistUpsertCacheMut.RLock()
	cache, cached := albumArtistUpsertCache[key]
	albumArtistUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			albumArtistAllColumns,
			albumArtistColumnsWithDefault,
			albumArtistColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			albumArtistAllColumns,
			albumArtistPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert album_artists, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`album_artists`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `album_artists` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(albumArtistType, albumArtistMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(albumArtistType, albumArtistMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert for album_artists")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(albumArtistType, albumArtistMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to retrieve unique values for album_artists")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to populate default values for album_artists")
	}

CacheNoHooks:
	if !cached {
		albumArtistUpsertCacheMut.Lock()
		albumArtistUpsertCache[key] = cache
		albumArtistUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AlbumArtist record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AlbumArtist) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no AlbumArtist provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), albumArtistPrimaryKeyMapping)
	sql := "DELETE FROM `album_artists` WHERE `album_artist_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from album_artists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for album_artists")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q albumArtistQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no albumArtistQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from album_artists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for album_artists")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AlbumArtistSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(albumArtistBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), albumArtistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `album_artists` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, albumArtistPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from albumArtist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for album_artists")
	}

	if len(albumArtistAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AlbumArtist) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAlbumArtist(ctx, exec, o.AlbumArtistID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AlbumArtistSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AlbumArtistSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), albumArtistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `album_artists`.* FROM `album_artists` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, albumArtistPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in AlbumArtistSlice")
	}

	*o = slice

	return nil
}

// AlbumArtistExists checks if the AlbumArtist row exists.
func AlbumArtistExists(ctx context.Context, exec boil.ContextExecutor, albumArtistID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `album_artists` where `album_artist_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, albumArtistID)
	}
	row := exec.QueryRowContext(ctx, sql, albumArtistID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if album_artists exists")
	}

	return exists, nil
}
